#!/bin/bash

# Securonis Linux Panic mode 
# Developer: root0emir
# Version 1.8 


# check tor
check_tor_status() {
    tor_check=$(curl -s https://check.torproject.org/api/ip)
    if echo "$tor_check" | grep -q '"IsTor":true'; then
        echo "You're connected to the Tor network, your privacy is protected"
        return 0
    else
        echo "You're not connected to the Tor network, your privacy is at risk."
        return 1
    fi
}

# DNS leak test
dns_leak_test() {
    echo "Checking DNS Leak..."
    if check_tor_status; then
        dig +short @resolver1.opendns.com myip.opendns.com
    else
        dig example.com
    fi
}

# IP leak test
ip_leak_test() {
    echo "Checking IP Leak..."
    if check_tor_status; then
        curl --socks5-hostname 127.0.0.1:9050 https://ipleak.net/json/
    else
        curl -s https://ipleak.net/json/
    fi
}

# VPN check
check_vpn_status() {
    if ip a | grep -q "tun0"; then
        echo "VPN is running."
        return 0
    else
        echo "VPN is not running."
        return 1
    fi
}

# DNSCrypt check
check_dnscrypt() {
    if pgrep dnscrypt >/dev/null 2>&1; then
        echo "DNSCrypt is running."
        return 0
    else
        echo "DNSCrypt is not running."
        return 1
    fi
}


check_privacy_score() {
    score=0

    # Live Mode - Check for specific environment variables
    if [ "$LIVE_ENV" == "true" ] || [ "$PRODUCTION" == "true" ] || [ "$ENV" == "live" ] || [ "$ENV" == "production" ]; then
        score=$((score + 20))
    else
        echo "Not in live mode."
        echo "--------------"
    fi

    # VPN
    if check_vpn_status; then
        score=$((score + 15))
    else
        echo "-------------"
    fi

    # Tor
    if check_tor_status; then
        score=$((score + 50))
    else
        echo "-------------"
    fi

    # DNSCrypt
    if check_dnscrypt; then
        score=$((score + 15))
    else
        echo "-------------"
    fi

    echo "Your privacy score is: $score"
}

# System status info
system_status() {
    echo "Uptime: $(uptime -p)"
    echo "Load Average: $(cat /proc/loadavg)"
    echo "RAM Usage: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
    echo "CPU Usage: $(top -bn1 | grep 'Cpu(s)' | sed 's/.*, *\([0-9.]*\)%* id.*/\1/' | awk '{print 100 - $1}')%"
    echo "-------------------------------------"
    echo "Disk Usage:"
    df -h
}

# Show system info
system_info() {
    echo "OS: $(lsb_release -ds)"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "CPU Info: $(lscpu | grep 'Model name')"
    echo "Memory Info: $(free -h)"
    echo "Disk Info: $(lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,UUID)"
}

# network status
network_status() {
    ip a | grep inet
}

# check ip and dns
check_ip() {
    echo "Checking IP and DNS settings:"

    # Check for Tor IP and status
    HTML=$(curl -s https://check.torproject.org/?lang=en_US)
    if echo "$HTML" | grep -q "Congratulations. This browser is configured to use Tor."; then
        TOR_IP=$(echo "$HTML" | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -n 1)
        echo "You appear to be connected to the Tor network.Your Tor IP Address: $TOR_IP"
    else
        ip=$(curl --silent ifconfig.me)
        dns=$(grep 'nameserver' /etc/resolv.conf | awk '{print $2}')
        echo "IP Address: $ip"
        echo "DNS Addres: $dns"
    fi
}



# change dns server
change_dns() {
    echo "1) Use Cloudflare DNS (1.1.1.1)"
    echo "2) Enter a custom DNS server address"
    read -p "Choose an option: " dns_option

    case $dns_option in
        1)
            echo "Changing DNS to Cloudflare (1.1.1.1)..."
            echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
            ;;
        2)
            read -p "Enter the DNS server address: " custom_dns
            echo "Changing DNS to $custom_dns..."
            echo "nameserver $custom_dns" | sudo tee /etc/resolv.conf
            ;;
        *)
            echo "Invalid option! Please select a valid option."
            ;;
    esac
}

# delete network traces with bleachbit
delete_network_traces() {
    echo "Deleting network traces with BleachBit..."
    sudo apt-get install -y bleachbit
    bleachbit -c system.cache system.recent_documents system.tmp system.trash
    echo "Network traces deleted."
}

# privacy status check
check_privacy_status() {
    echo "----------------------------"
    echo "Checking privacy settings..."
    
    # Check TOR status
    if check_tor_status; then
        echo "[+]TOR is running."
    else
        echo "[!]TOR is not running."
    fi

    # Check VPN status
    if ip a | grep -q tun0; then
        echo "[+]VPN is active."
    else
        echo "[!]VPN is not active."
    fi

    # Check DNS status
    echo "[+]Current DNS addres:"
    cat /etc/resolv.conf | grep nameserver

    # Check Proxy settings
    if [ -n "$http_proxy" ] || [ -n "$https_proxy" ]; then
        echo "[+]Proxy is set."
        echo "HTTP Proxy: $http_proxy"
        echo "HTTPS Proxy: $https_proxy"
    else
        echo "[!]Proxy is not set."
    fi

    # Check UFW status
    echo "[-]Firewall Status:"
    sudo ufw status
    
    # Check AppArmor status
    echo "[-]AppArmor Status:"
    sudo apparmor_status
}

# security scan
security_scan() {
    echo "Running detailed security scan..."
    sudo apt install -y clamav
    sudo freshclam
    sudo clamscan -r --bell -i --exclude-dir="^/sys" --exclude-dir="^/proc" --exclude-dir="^/dev" /
}

# cleaning traces 
cleaning_traces() {
    echo "Cleaning traces..."
    history -c && history -w
    rm -rf ~/.cache ~/.bash_history ~/.zsh_history
    sudo rm -rf /tmp/* /var/tmp/* /var/log/*
    echo "Traces cleaned."
}

# RAM wipe
wipe_ram() {
    echo "Wiping RAM..."
    sync; echo 3 > /proc/sys/vm/drop_caches
    sudo sh -c "echo 1 > /proc/sys/vm/drop_caches"
}

# disk wipe
wipe_disk() {
    read -p "Enter the disk to wipe (e.g., /dev/sdX): " disk
    sudo shred -v -n 5 -z "$disk"
}

# change the hostname
change_hostname() {
    read -p "Enter new hostname: " new_host
    sudo hostnamectl set-hostname "$new_host"
}

# physical security settings
physical_security() {
    echo "Activating physical security measures..."

    echo "Disabling USB ports..."
    sudo sh -c "echo 'blacklist usb-storage' > /etc/modprobe.d/blacklist-usb.conf"

    echo "Locking all active sessions..."
    sudo pkill -KILL -u $(whoami)

    echo "Disabling screen/keyboard input..."
    sudo setterm -blank force

    echo "Enabling TPM security (if available)..."

    echo "Setting kernel security parameters..."
    sudo sysctl -w kernel.randomize_va_space=2
    sudo sysctl -w kernel.kptr_restrict=2
    sudo sysctl -w kernel.dmesg_restrict=1
    sudo sysctl -w fs.protected_hardlinks=1
    sudo sysctl -w fs.protected_symlinks=1

    echo "Setting hardware security parameters..."
    sudo modprobe -r usb_storage
    echo "blacklist usb_storage" | sudo tee /etc/modprobe.d/blacklist-usb-storage.conf

    echo "Setting tmp security parameters..."
    sudo mount -o remount,nodev,noexec,nosuid /tmp

    echo "Physical security measures are now in place."
}

# disable physical security
disable_physical_security() {
    echo "Disabling physical security measures..."

    echo "Enabling USB ports..."
    sudo rm /etc/modprobe.d/blacklist-usb.conf
    sudo modprobe usb_storage

    echo "Reverting kernel security parameters..."
    sudo sysctl -w kernel.randomize_va_space=1
    sudo sysctl -w kernel.kptr_restrict=0
    sudo sysctl -w kernel.dmesg_restrict=0
    sudo sysctl -w fs.protected_hardlinks=0
    sudo sysctl -w fs.protected_symlinks=0

    echo "Reverting hardware security parameters..."
    sudo rm /etc/modprobe.d/blacklist-usb-storage.conf

    echo "Reverting tmp security parameters..."
    sudo mount -o remount /tmp

    echo "Physical security measures have been disabled."
}

# checking kernel security status
check_kernel_security_status() {
    echo "Checking kernel security status..."
    
# Function to check if Paranoia Mode is enabled
is_paranoia_mode_enabled() {
    if [ -f /etc/sysctl.d/99-paranoia-mode.conf ] && iptables -L INPUT | grep -q "DROP"; then
        return 0
    else
        return 1
    fi
}

# Check if /etc/sysctl.d/99-securonis-hardening.conf exists
if [ -f /etc/sysctl.d/99-securonis-hardening.conf ]; then
    echo "[+]Kernel Settings are done. Your system is very secure against Network and System attacks."
else
    echo "[!]Kernel settings are not applied. Your system may be vulnerable to Network and System attacks."
    echo "To make your system and network more secure, select System Hardening Settings from the desktop or run the following command in the terminal:"
    echo "systemhardening"
fi

# Check if Paranoia Mode is enabled
if is_paranoia_mode_enabled; then
    echo "You are in Paranoia Mode. Your system is at the highest security level."
fi
}

# Paranoia mode
activate_paranoia_mode() {
    echo "Activating paranoia mode..."
    sudo /usr/local/bin/paranoia
}

# Paranoia mode disable
deactivate_paranoia_mode() {
    echo "Deactivating paranoia mode..."
    sudo /usr/local/bin/paranoiadeactivate
}

# destroy the all data and traces
nuke_the_system() {
    echo "Nuking the system..."
    sudo /usr/local/bin/nuke2system
}

# Disk cryption control
check_disk_encryption() {
    echo "Checking disk encryption..."
    sudo lsblk -o NAME,FSTYPE,MOUNTPOINT,UUID
}

# security updates check
check_security_updates() {
    echo "Checking for security updates..."
    sudo apt update && sudo apt list --upgradable | grep -i security
}

# All ip info
check_all_ip_info() {
    echo "Checking all IP information..."
    curl ifconfig.me/all
}

# mac address spoof
spoof_mac() {
    read -p "Enter network interface (e.g., eth0, wlan0): " iface
    sudo ifconfig "$iface" down
    sudo macchanger -r "$iface"
    sudo ifconfig "$iface" up
    echo "MAC address spoofed."
}

# free space wipe
wipe_free_space() {
    echo "Wiping free space..."
    sudo dd if=/dev/zero of=/zerofillfile bs=1M
    sudo rm -f /zerofillfile
    echo "Free space wiped."
}

# SSL/TLS fingerprint verification
ssl_tls_fingerprint_verification() {
    read -p "Enter domain to verify: " domain
    echo | openssl s_client -connect "$domain":443 2>/dev/null | openssl x509 -fingerprint -noout
}

# Firewall hardening
enable_firewall() {
    echo "Enabling firewall..."
    sudo ufw enable
    echo "Firewall enabled."
}

disable_firewall() {
    echo "Disabling firewall..."
    sudo ufw disable
    echo "Firewall disabled."
}

harden_firewall() {
    echo "Hardening firewall rules..."
    sudo ufw default deny incoming
    sudo ufw default deny outgoing
    sudo ufw enable
    echo "Firewall hardened."
}

disable_hardened_firewall() {
    echo "Disabling hardened firewall rules..."
    sudo ufw default allow incoming
    sudo ufw default allow outgoing
    sudo ufw disable
    echo "Hardened firewall disabled."
}

firewall_settings() {
    echo "1. Enable Firewall"
    echo "2. Disable Firewall"
    echo "3. Enable Hardened Firewall"
    echo "4. Disable Hardened Firewall"
    echo "5. Exit"
    read -p "Select an option: " option
    case $option in
        1)
            enable_firewall
            ;;
        2)
            disable_firewall
            ;;
        3)
            harden_firewall
            ;;
        4)
            disable_hardened_firewall
            ;;
        5)
            exit 0
            ;;
        *)
            echo "Invalid option. Please try again."
            menu
            ;;
    esac
}

# network traffic monitor
monitor_network_traffic() {
    echo "Monitoring network traffic..."
    sudo iftop -i $(ip route | grep '^default' | awk '{print $5}')
}

# secure file delete
secure_delete() {
    read -p "Enter file or directory to securely delete: " target
    sudo srm -rv "$target"
}

# browser traces
delete_browser_traces() {
    echo "Deleting browser traces..."
    rm -rf ~/.mozilla/firefox/*.default-release/places.sqlite ~/.config/google-chrome/Default/History
    echo "Browser traces deleted."
}

# IP location check
check_ip_location() {
    echo "Checking IP location..."
    curl -s ipinfo.io
}

# mitm attack defense
mitm_attack_check_defense() {
    echo "Running MITM attack check and defense..."
    sudo /usr/local/bin/antimitm
}

# ASCII menu 
while true; do
    clear
    echo "====================================="
    echo "         System and Network          "
    echo "====================================="
    echo "Hostname: $(hostname)"
    echo "IP Address: $(hostname -I | awk '{print $1}')"
    echo "====================================="
    echo "           System Status             "
    echo "====================================="
    system_status
    echo "====================================="
    echo "           System Info               "
    echo "====================================="
    system_info
    echo "====================================="
    echo "           Network Info              "
    echo "====================================="
    network_status
    echo "====================================="
    echo "              Menu                   "
    echo "====================================="
    echo "1) Check IP & DNS"
    echo "2) Check IP Location"
    echo "3) Check Privacy Score"
    echo "4) Check Tor Status"
    echo "5) Check VPN Status"
    echo "6) Check All IP Information"
    echo "7) DNS Leak Test"
    echo "8) IP Leak Test"
    echo "-------------------"
    echo "9) MITM Attack Check & Defense"
    echo "10) Change DNS"
    echo "11) Spoof MAC Address"
    echo "12) Delete Network Traces"
    echo "13) Monitor Network Traffic"
    echo "-------------------"
    echo "14) Security Scan (ClamAV)"
    echo "15) Cleaning System Traces"
    echo "16) Wipe RAM"
    echo "17) Wipe Disk"
    echo "18) Wipe Free Space"
    echo "19) Change Hostname"
    echo "20) Check Kernel Security Status"
    echo "21) Check Disk Encryption"
    echo "22) Check Security Updates"
    echo "23) Set Firewall Rules"
    echo "24) Secure File Delete"
    echo "-------------------"
    echo "25) SSL/TLS Fingerprint Verification"
    echo "26) Clean Browser Traces"
    echo "-------------------"
    echo "27) Activate Paranoia Mode"
    echo "28) Deactivate Paranoia Mode"
    echo "--------------------"
    echo "29) Activate Physical Security"
    echo "30) Disable Physical Security"
    echo "--------------------"
    echo "31) Nuke The System"
    echo "--------------------"
    echo "0) Exit"
    echo "====================================="
    read -p "Choose an option: " choice
    
    case $choice in
        1) check_ip ;;
        2) check_ip_location ;;
        3) check_privacy_score
           check_privacy_status
            ;;
        4) check_tor_status ;;
        5) check_vpn_status ;;
        6) check_all_ip_info ;;
        7) dns_leak_test ;;
        8) ip_leak_test ;;
        9) mitm_attack_check_defense ;;
        10) change_dns ;;
        11) spoof_mac ;;
        12) delete_network_traces ;;
        13) monitor_network_traffic ;;
        14) security_scan ;;
        15) cleaning_traces ;;
        16) wipe_ram ;;
        17) wipe_disk ;;
        18) wipe_free_space ;;
        19) change_hostname ;;
        20) check_kernel_security_status ;;
        21) check_disk_encryption ;;
        22) check_security_updates ;;
        23) firewall_settings ;;
        24) secure_delete ;;
        25) ssl_tls_fingerprint_verification ;;
        26) delete_browser_traces ;;
        27) activate_paranoia_mode ;;
        28) deactivate_paranoia_mode ;;
        29) physical_security ;;
        30) disable_physical_security ;;
        31) nuke_the_system ;;
        0) exit 0 ;;
        *) echo "Invalid option. Try again." ;;
    esac
    read -p "Press Enter to continue..." dummy
done 
