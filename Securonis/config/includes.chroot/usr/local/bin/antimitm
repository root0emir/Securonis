#!/usr/bin/env python3

# Version 1.2 Developer: root0emir

import scapy.all as scapy
import os
import sys
import signal
from datetime import datetime

def get_mac(ip):
    try:
        arp_request = scapy.ARP(pdst=ip)
        broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
        return answered_list[0][1].hwsrc if answered_list else None
    except Exception as e:
        print(f"[!] Error getting MAC address for IP {ip}: {e}")
        return None

def sniff_packets(interface):
    try:
        scapy.sniff(iface=interface, store=False, prn=process_packet)
    except Exception as e:
        print(f"[!] Error sniffing packets on interface {interface}: {e}")

def process_packet(packet):
    if packet.haslayer(scapy.ARP) and packet[scapy.ARP].op == 2:
        try:
            real_mac = get_mac(packet[scapy.ARP].psrc)
            response_mac = packet[scapy.ARP].hwsrc

            if real_mac and real_mac != response_mac:
                alert_msg = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [!] You are under attack! ARP spoofing detected from IP: {packet[scapy.ARP].psrc}"
                print(alert_msg)
                print(f"    Real MAC: {real_mac}, Fake MAC: {response_mac}")
                block_attacker(packet[scapy.ARP].psrc)
            else:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] No attack detected from IP: {packet[scapy.ARP].psrc}")
        except IndexError:
            pass
        except Exception as e:
            print(f"[!] Error processing packet: {e}")

def block_attacker(ip):
    try:
        os.system(f"iptables -A INPUT -s {ip} -j DROP")
        os.system(f"iptables -A FORWARD -s {ip} -j DROP")
        print(f"[+] Blocked attacker IP: {ip}")
    except Exception as e:
        print(f"[!] Error blocking attacker IP {ip}: {e}")

def restore_network(gateway_ip, gateway_mac, target_ip, target_mac):
    try:
        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=gateway_ip, hwsrc=gateway_mac)
        scapy.send(packet, count=4, verbose=False)
    except Exception as e:
        print(f"[!] Error restoring network: {e}")

def signal_handler(sig, frame):
    print("\n[*] Stopping packet sniffing...")
    sys.exit(0)

def get_network_info():
    try:
        gateway_ip = scapy.conf.route.route("0.0.0.0")[2]
        gateway_mac = get_mac(gateway_ip)
        if not gateway_mac:
            sys.exit("[!] Could not get gateway MAC address. Exiting...")

        target_ip = scapy.get_if_addr(scapy.conf.iface)
        target_mac = get_mac(target_ip)
        if not target_mac:
            sys.exit("[!] Could not get target MAC address. Exiting...")

        return gateway_ip, gateway_mac, target_ip, target_mac
    except Exception as e:
        sys.exit(f"[!] Error getting network information: {e}")

def check_network_interface(interface):
    try:
        scapy.get_if_hwaddr(interface)
    except ValueError:
        sys.exit(f"[!] Network interface {interface} is not available. Please check if it is connected and try again.")

def main():
    if os.geteuid() != 0:
        sys.exit("[!] Please run as root")

    signal.signal(signal.SIGINT, signal_handler)

    interface = scapy.conf.iface
    check_network_interface(interface)
    print(f"[*] Using network interface: {interface}")

    gateway_ip, gateway_mac, target_ip, target_mac = get_network_info()
    print(f"[*] Gateway IP: {gateway_ip}, Gateway MAC: {gateway_mac}")
    print(f"[*] Target IP: {target_ip}, Target MAC: {target_mac}")

    try:
        print("[*] Starting packet sniffing...")
        sniff_packets(interface)
    except KeyboardInterrupt:
        print("[*] Stopping packet sniffing...")
        restore_network(gateway_ip, gateway_mac, target_ip, target_mac)
        sys.exit(0)
    except Exception as e:
        print(f"[!] Error in main: {e}")
        restore_network(gateway_ip, gateway_mac, target_ip, target_mac)
        sys.exit(1)

if __name__ == "__main__":
    main()
